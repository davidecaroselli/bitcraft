//
// Created by Davide Caroselli on 11/09/24.
//
#include "algebra3d.h"

matrix_t matrix_t::operator*(const matrix_t &o) const {
    return {.v = {
            {
                    v[0][0] * o.v[0][0] + v[0][1] * o.v[1][0] + v[0][2] * o.v[2][0] + v[0][3] * o.v[3][0],
                    v[0][0] * o.v[0][1] + v[0][1] * o.v[1][1] + v[0][2] * o.v[2][1] + v[0][3] * o.v[3][1],
                    v[0][0] * o.v[0][2] + v[0][1] * o.v[1][2] + v[0][2] * o.v[2][2] + v[0][3] * o.v[3][2],
                    v[0][0] * o.v[0][3] + v[0][1] * o.v[1][3] + v[0][2] * o.v[2][3] + v[0][3] * o.v[3][3]
            },
            {
                    v[1][0] * o.v[0][0] + v[1][1] * o.v[1][0] + v[1][2] * o.v[2][0] + v[1][3] * o.v[3][0],
                    v[1][0] * o.v[0][1] + v[1][1] * o.v[1][1] + v[1][2] * o.v[2][1] + v[1][3] * o.v[3][1],
                    v[1][0] * o.v[0][2] + v[1][1] * o.v[1][2] + v[1][2] * o.v[2][2] + v[1][3] * o.v[3][2],
                    v[1][0] * o.v[0][3] + v[1][1] * o.v[1][3] + v[1][2] * o.v[2][3] + v[1][3] * o.v[3][3]
            },
            {
                    v[2][0] * o.v[0][0] + v[2][1] * o.v[1][0] + v[2][2] * o.v[2][0] + v[2][3] * o.v[3][0],
                    v[2][0] * o.v[0][1] + v[2][1] * o.v[1][1] + v[2][2] * o.v[2][1] + v[2][3] * o.v[3][1],
                    v[2][0] * o.v[0][2] + v[2][1] * o.v[1][2] + v[2][2] * o.v[2][2] + v[2][3] * o.v[3][2],
                    v[2][0] * o.v[0][3] + v[2][1] * o.v[1][3] + v[2][2] * o.v[2][3] + v[2][3] * o.v[3][3]
            },
            {
                    v[3][0] * o.v[0][0] + v[3][1] * o.v[1][0] + v[3][2] * o.v[2][0] + v[3][3] * o.v[3][0],
                    v[3][0] * o.v[0][1] + v[3][1] * o.v[1][1] + v[3][2] * o.v[2][1] + v[3][3] * o.v[3][1],
                    v[3][0] * o.v[0][2] + v[3][1] * o.v[1][2] + v[3][2] * o.v[2][2] + v[3][3] * o.v[3][2],
                    v[3][0] * o.v[0][3] + v[3][1] * o.v[1][3] + v[3][2] * o.v[2][3] + v[3][3] * o.v[3][3]
            }
    }};
}

mesh_t::mesh_t(const std::vector<triangle_t> &faces) : faces(faces) {}
